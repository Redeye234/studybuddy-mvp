openapi: 3.0.3
info:
  title: StudyBuddy+ API
  version: 0.1
servers:
  - url: http://localhost:8000
paths:
  /v1/auth/email:
    post:
      summary: Email auth (stub)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200': { description: OK }
  /v1/me:
    get:
      summary: Get current user (stub)
      responses:
        '200': { description: OK }
  /v1/notes:
    get:
      summary: List notes
      responses:
        '200': { description: OK }
    post:
      summary: Upload note
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200': { description: OK }
  /v1/notes/{id}:
    get:
      summary: Get note
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /v1/notes/{id}/summarize:
    post:
      summary: Enqueue OCR+summarization job
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page_start: { type: integer }
                page_end: { type: integer }
                max_pages: { type: integer }
      responses:
        '200': { description: OK }
  /v1/notes/{id}/summary:
    get:
      summary: Get summary + flashcards
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /v1/rooms:
    get:
      summary: List rooms
      responses:
        '200': { description: OK }
    post:
      summary: Create room
      responses:
        '200': { description: OK }
  /v1/rooms/{id}:
    get:
      summary: Get room
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /v1/rooms/{id}/sessions/start:
    post:
      summary: Start session
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /v1/rooms/{id}/sessions/stop:
    post:
      summary: Stop session
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /v1/memes/random:
    get:
      summary: Random meme
      parameters:
        - in: query
          name: category
          schema: { type: string }
      responses:
        '200': { description: OK }
  /v1/memes/{id}/share:
    post:
      summary: Share meme
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /v1/jobs/{id}:
    get:
      summary: Get job status
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /v1/subscription:
    get:
      summary: Get subscription
      responses:
        '200': { description: OK }
  /v1/subscription/activate:
    post:
      summary: Activate subscription
      responses:
        '200': { description: OK }
  /v1/subscription/cancel:
    post:
      summary: Cancel subscription
      responses:
        '200': { description: OK }
  /healthz:
    get:
      summary: Health check with storage status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  storage:
                    type: object
                    properties:
                      ok: { type: boolean }
                      bucket: { type: string }
                      error: { type: string }
                  db:
                    type: object
                    properties:
                      ok: { type: boolean }
                      error: { type: string }
                  redis:
                    type: object
                    properties:
                      ok: { type: boolean }
                      error: { type: string }
